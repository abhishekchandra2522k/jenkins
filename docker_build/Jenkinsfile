def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
]

pipeline {
    agent any
    tools {
        maven "MAVEN3.9"
        jdk "jdk17"
    }

    environment{
        registryCredential='ecr:us-east-1:awscreds'
        imageName="940482443762.dkr.ecr.us-east-1.amazonaws.com/vprofileappimg"
        vprofileRegistry="https://940482443762.dkr.ecr.us-east-1.amazonaws.com"
        cluster=""
        service=""
    }

    stages {
        stage('Fetch Code'){
            steps{
                git branch: 'docker', url: 'https://github.com/hkhcoder/vprofile-project.git'
            }
        }
        
        stage('Build') {
            steps {
                sh 'mvn install -DskipTests'
            }
            post {
                success {
                    echo "Archiving Artifact"
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage('Unit Test'){
            steps{
                sh 'mvn test'
            }
        }

        stage('Checkstyle Analysis'){
            steps{
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage("Build & SonarQube analysis") { // Additional stage to upload checkstyle and other reports to sonarqube server
            environment{
                scannerHome = tool 'sonar6.2'
            }
            steps {
              withSonarQubeEnv('sonarserver') {
                sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                    -Dsonar.projectName=vprofile \
                    -Dsonar.projectVersion=1.0 \
                    -Dsonar.sources=src/ \
                    -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest \
                    -Dsonar.junit.reportsPath=target/surefire-reports/ \
                    -Dsonar.jacoco.reporthPath=targer/jacoco.exe \
                    -Dsonar.java.checkstyle.reportsPath=target/checkstyle-result.xml'''
              }
            }
        }

        stage("Quality Gate") {
            steps{
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        // change from nexus artifact uploader to build docker image and upload the container on Amazon ECR
        stage("Build App Image"){
            steps{
                script{
                    dockerImage = docker.build(imageName + ":$BUILD_NUMBER", "./Docker-files/app/multistage/" )
                }
            }
        }

        stage("Upload App Image"){
            steps{
                script {
                    docker.withRegistry(vprofileRegistry, registryCredential){
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }

        stage("Clean Up"){
            steps{
                sh '''#!/bin/bash
                    docker rmi -f $(docker images -a -q)
                '''
            }
        }
    }

    post{
        always {
            echo 'Slack Notification'
            slackSend channel: '#devops',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job: ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }
}